# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: enquete.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'


descriptor_data = "\n\renquete.proto\x12\x11mypackage.enquete\x1a\x1fgoogle/protobuf/timestamp.proto\"\x83\x03\n\x07\x45nquete\x12\n\n\x02id\x18\x01 \x01(\x03\x12\r\n\x05title\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\x31\n\x06status\x18\x04 \x01(\x0e\x32!.mypackage.enquete.Enquete.Status\x12,\n\x08start_at\x18\x05 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12*\n\x06\x65nd_at\x18\x06 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12.\n\ncreated_at\x18\x07 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12.\n\nupdated_at\x18\x08 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"[\n\x06Status\x12\x16\n\x12STATUS_UNSPECIFIED\x10\x00\x12\x10\n\x0cSTATUS_DRAFT\x10\x01\x12\x14\n\x10STATUS_PUBLISHED\x10\x02\x12\x11\n\rSTATUS_CLOSED\x10\x03\"{\n\x12ListEnqueteRequest\x12<\n\x06\x66ilter\x18\x01 \x01(\x0b\x32,.mypackage.enquete.ListEnqueteRequest.Filter\x12\x0e\n\x06offset\x18\x02 \x01(\x03\x12\r\n\x05limit\x18\x03 \x01(\x03\x1a\x08\n\x06\x46ilter\"C\n\x13ListEnqueteResponse\x12,\n\x08\x65nquetes\x18\x01 \x03(\x0b\x32\x1a.mypackage.enquete.Enquete\"\'\n\x11GetEnqueteRequest\x12\x12\n\nenquete_id\x18\x01 \x01(\x03\"A\n\x12GetEnqueteResponse\x12+\n\x07\x65nquete\x18\x01 \x01(\x0b\x32\x1a.mypackage.enquete.Enquete2\xc9\x01\n\x0e\x45nqueteService\x12\\\n\x0bListEnquete\x12%.mypackage.enquete.ListEnqueteRequest\x1a&.mypackage.enquete.ListEnqueteResponse\x12Y\n\nGetEnquete\x12$.mypackage.enquete.GetEnqueteRequest\x1a%.mypackage.enquete.GetEnqueteResponseb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Mypackage
  module Enquete
    Enquete = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.Enquete").msgclass
    Enquete::Status = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.Enquete.Status").enummodule
    ListEnqueteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.ListEnqueteRequest").msgclass
    ListEnqueteRequest::Filter = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.ListEnqueteRequest.Filter").msgclass
    ListEnqueteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.ListEnqueteResponse").msgclass
    GetEnqueteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.GetEnqueteRequest").msgclass
    GetEnqueteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mypackage.enquete.GetEnqueteResponse").msgclass
  end
end
